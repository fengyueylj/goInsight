// 功能弃用
package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"goInsight/global"
	"io"
	"net/http"
	"time"
)

type HTTPResponse struct {
	Code string `json:"code"`
	Data []struct {
		Summary      []string `json:"summary"`
		Level        string   `json:"level"`
		AffectedRows int      `json:"affected_rows"`
		Type         string   `json:"type"`
		FingerID     string   `json:"finger_id"`
		Query        string   `json:"query"`
	} `json:"data"`
	Message   string `json:"message"`
	Status    int    `json:"status"`
	RequestID string `json:"request_id"`
}

type GAuditApi struct {
	DbUser            string
	DbPassword        string
	DbHost            string
	DbPort            int
	DB                string
	Timeout           int64
	CustomAuditParams map[string]interface{}
	SqlText           string
}

func (g *GAuditApi) post() ([]byte, error) {
	// 默认60s，如果审计的数据集大，请修改此处
	client := &http.Client{Timeout: 600 * time.Second}

	var data map[string]interface{} = map[string]interface{}{
		"db_user":                 g.DbUser,
		"db_password":             g.DbPassword,
		"db_host":                 g.DbHost,
		"db_port":                 g.DbPort,
		"db":                      g.DB,
		"timeout":                 g.Timeout,
		"custom_audit_parameters": g.CustomAuditParams,
		"sqltext":                 g.SqlText,
	}
	// 转json
	bytesData, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}
	jsonD := bytes.NewReader(bytesData)

	// post
	resp, err := client.Post(global.App.Config.GAudit.Url, "application/json; charset=UTF-8", jsonD)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	// 读取数据
	body, err := io.ReadAll(resp.Body)
	return body, err
}

func (g *GAuditApi) parser() (*HTTPResponse, error) {
	body, err := g.post()
	if err != nil {
		return nil, err
	}
	var result HTTPResponse
	// 赋值给结构体
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

func (g *GAuditApi) Check() (*HTTPResponse, error) {
	resJson, err := g.parser()
	if err != nil {
		return nil, err
	}
	// 接口返回错误
	if resJson.Code == "0001" {
		return nil, fmt.Errorf("gaudit: %s", resJson.Message)
	}
	// 检查语法检查是否通过
	// status: 0 语法检查不通过，1语法检查通过
	var checkPass int = 0
	for _, row := range resJson.Data {
		if row.Level != "INFO" {
			checkPass += 1
		}
	}
	if checkPass == 0 {
		// status=1，表示语法检查通过
		resJson.Status = 1
	}
	return resJson, nil
}
